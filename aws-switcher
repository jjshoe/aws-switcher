#!/usr/bin/perl

use strict;

use JSON;
use YAML;

use Data::Dumper;

# Load in possible profiles
my $configs = YAML::LoadFile($ENV{'HOME'} . '/.aws/config.yml');

# Prompt which one we want to load
my $selection = pick_config({configs => $configs, filter => $ARGV[0]});

# We need to loop through all profiles, but before we write them out there are special cases
#   Referencing a source profile
#   Referencing a mfa token
#   SSO
# When a special case is detected we need to do a little work to retrieve credentials for those profiles

# Find out if we need to source another profile
my $parent_profile;
if ($configs->[$selection]->{'source_profile'})
{
  $parent_profile = find_parent_profile({profile => $configs->[$selection]->{'source_profile'}});

  # See if the parent profile requires mfa
  if ($parent_profile->{'mfa_arn'})
  {
    my $credentials = request_credentials_with_mfa({profile => $parent_profile});
    $parent_profile = {%{$parent_profile}, %{${credentials}}};
  }
}
else
{
  # See if our selection requires mfa
  if ($configs->[$selection]->{'mfa_arn'})
  {
    my $credentials = request_credentials_with_mfa({profile => $configs->[$selection]});
    $configs->[$selection] = {%{$configs->[$selection]}, %{${credentials}}};
  }
}

write_configs({configs => $configs, selection => $selection});

# See if our selection requires SSO (sso credentials get cached, not written out to ~/.aws/credentials)
if ($configs->[$selection]->{'sso_start_url'})
{
  request_credentials_with_sso({profile => $configs->[$selection]});
}

sub write_configs
{
  my ($args) = @_;

  my $configs   = $args->{'configs'};
  my $selection = $args->{'selection'};

  my $config_options = ['aws_access_key_id', 'aws_secret_access_key', 'role_arn', 'source_profile', 'aws_session_token', 'sso_start_url', 'sso_region', 'sso_account_id', 'sso_role_name', 'output'];

  # Write out the config
  open(my $fh, '>', $ENV{'HOME'} . '/.aws/config');
  print $fh "[default]\n";
  print $fh 'region = ' . $configs->[$selection]->{'region'} . "\n";
  close($fh);

  # Write out all profiles credentials
  open(my $fh, '>', $ENV{'HOME'} . '/.aws/credentials');

  for (my  $i = 0; $i < scalar(@{$configs}); $i++)
  {
    print $fh '[' . $configs->[$i]->{'profile'} . "]\n";
    foreach my $config_option (@{$config_options})
    { 
      if (exists($configs->[$i]->{$config_option}))
      {
        print $fh $config_option . ' = ' . $configs->[$i]->{$config_option} . "\n";
      }
    }
    print $fh "\n";
  }

  # Write out the picked profile as the default so no env args need to be set
  print $fh "[default]\n";

  foreach my $config_option (@{$config_options})
  {
    if (exists($configs->[$selection]->{$config_option}))
    {
      print $fh $config_option . ' = ' . $configs->[$selection]->{$config_option} . "\n";
    }
  }

  close($fh);

  # Write out a status file for bash PS1 to pick up
  open(my $fh, '>', $ENV{'HOME'} . '/.aws/status');
  print $fh $configs->[$selection]->{'name'} . ' ' . $configs->[$selection]->{'region'};
  close($fh);
}

sub request_credentials_with_mfa
{
  my ($args) = @_;

  my $profile = $args->{'profile'};

  $ENV{'AWS_DEFAULT_REGION'}    = $profile->{'region'};
  $ENV{'AWS_ACCESS_KEY_ID'}     = $profile->{'aws_access_key_id'};
  $ENV{'AWS_SECRET_ACCESS_KEY'} = $profile->{'aws_secret_access_key'};


  # Fetch the mfa token from the user
  print "Enter the MFA token for " . $profile->{'name'} . " to assume into " . $configs->[$selection]->{'name'} . ":\n";
  my $mfa_token = <STDIN>;
  chomp($mfa_token);
  
  my $aws_cli_output_raw = run_command({'command' => "aws sts get-session-token --serial_number $profile->{'mfa_arn'} --token-code $mfa_token --duration-seconds 129600"});
  my $aws_cli_output = decode_json($aws_cli_output_raw);

  return {aws_access_key_id => $aws_cli_output->{'Credentials'}->{'AccessKeyId'}, aws_secret_access_key => $aws_cli_output->{'Credentials'}->{'SecretAccessKey'}, aws_session_token => $aws_cli_output->{'Credentials'}->{'SessionToken'}};
}

sub request_credentials_with_sso
{
  my ($args) = @_;

  my $profile = $args->{'profile'};

  run_command({'command' => 'aws sso login'});
}

sub find_parent_profile
{
  my ($args) = @_;

  my $profile = $args->{'profile'};

  foreach my $config (@{$configs})
  {
    if ($profile eq $config->{'profile'})
    {
	    return $config;
    }
  }

  return undef;
}

sub pick_config
{
  my ($args) = @_;

  my $configs   = $args->{'configs'};
  my $filter    = $args->{'filter'};

  # print out a list of configs, and ask which one to run
  print "Which config would you like to switch to?\n";

  if ($filter)
  {
    print "(applied filter: $filter)\n";
  }

  for (my $i = 0; $i < scalar(@{$configs}); $i++)
  {
    if ($configs->[$i]->{'name'} =~ /$filter/) {
      print $i . ') ' . $configs->[$i]->{'name'} . ' ' . $configs->[$i]->{'region'} . "\n";
    }
  }

  my $input = <STDIN>;

  if ($input !~ /^\d+/)
  {
    print "Try entering a number, idiot!\n";
  }
  else
  {
    return $input;
  }
}

sub mfa_check
{
  my ($args) = @_;

  my $profile = $args->{'profile'};
  my $configs = $args->{'configs'};

  foreach my $config (@{$configs})
  {
    if ($profile eq $config->{'profile'} && $config->{'source_profile'})
    {
      return mfa_check({profile => $config->{'source_profile'}, configs => $configs})
    }
    elsif ($profile eq $config->{'profile'} && $config->{'mfa_arn'})
    {
      return $config;
    }
  }
}

sub run_command {
  my ($args) = @_;

  my $command      = $args->{'command'};

  my $command_output = `$command`;

  if ($? != 0)
  {
    print "Error running command: $command\n$command_output\n";
    exit(1);
  }
}
